package com.sofurry.activities;

//~--- imports ----------------------------------------------------------------

import android.content.Context;
import android.content.Intent;
import android.content.SharedPreferences;

import android.graphics.Bitmap;

import android.net.Uri;

import android.os.Bundle;

import android.preference.PreferenceManager;

import android.util.Log;

import android.view.Menu;
import android.view.MenuItem;
import android.view.View;
import android.view.ViewGroup.LayoutParams;

import android.widget.Button;
import android.widget.ImageView;
import android.widget.TextView;
import android.widget.Toast;
import android.widget.LinearLayout;
import android.widget.RelativeLayout;

import com.sofurry.AppConstants;
import com.sofurry.R;
import com.sofurry.base.classes.FavableActivity;
import com.sofurry.base.interfaces.IRequestHandler;
import com.sofurry.model.Submission;
import com.sofurry.requests.AsyncFileDownloader;
import com.sofurry.requests.AsyncImageLoader;
import com.sofurry.requests.ContentDownloader;
import com.sofurry.requests.HttpRequest;
import com.sofurry.storage.FileStorage;
import com.sofurry.storage.ImageStorage;

import java.io.File;
import java.util.ArrayList;

import android.view.KeyEvent;


//~--- classes ----------------------------------------------------------------

/**
 * Class description
 *
 */
public class ViewArtActivity
        extends FavableActivity
        implements Runnable {
	
	// current page controls (change when page flips)
	private class PageHolder implements AsyncImageLoader.IImageLoadResult{
		private Bitmap    imageBitmap = null; 
		private ImageView image = null; 
		private ImageView savedIndicator = null;
		private TextView  InfoText = null;
		
		private Submission submission = null;
		private AsyncImageLoader imageLoader = null;
		
		private Context context = null;
		
		public void setSubmission(Submission s) {
			// do nothing if no change
			if (s == submission) {
				return;
			}
			
			// === clean loaded submission ===
        	// clean bitmap in case of reload
        	if (imageBitmap != null) {
        		imageBitmap.recycle();
        		imageBitmap = null;
        	}
        	
        	// === load new submission ===
        	submission = s;
        	
        	// load thumbnail
            imageBitmap = ImageStorage.loadSubmissionIcon(submission.getId());
        	image.setImageBitmap(imageBitmap);
			
            // set description
            InfoText.setText(MakeTitle());

            // check if image already saved
            SharedPreferences prefs = PreferenceManager.getDefaultSharedPreferences(context);
            if (prefs.getBoolean(AppConstants.PREFERENCE_IMAGE_CHECK_SAVED, true)) {
            	try {
                    File f = new File(submission.getSaveName(context));
                    if ( f.exists() ) {
                    	savedIndicator.setVisibility(View.VISIBLE);
                    } else {
                    	savedIndicator.setVisibility(View.INVISIBLE);
                    }
                } catch (Exception e) {
                }
            }
            
            // start load thread
            imageLoader = AsyncImageLoader.doLoad(context, this, submission, false);
		}

		private void doRefresh() {
			if (imageLoader != null) {
				return;
			}
            imageLoader = AsyncImageLoader.doLoad(context, this, submission, true);
		}
		
		public void onImageLoad(int id, Bitmap obj) {
			// do not show images for wrong submissions (late image loaders results)
			if (id != submission.getId() ) {
				obj.recycle();
				return;
			}
			
			imageLoader = null;

        	// clean bitmap in case of reload
        	if (imageBitmap != null) {
        		imageBitmap.recycle();
        		imageBitmap = null;
        	}

        	imageBitmap = obj;
        	image.setImageBitmap(imageBitmap);
		}

	    public void finish() {
	    	if (imageLoader != null) {
	    		imageLoader.doCancel();
	    		imageLoader = null;
	    	}
	    	
	    	if (imageBitmap != null) {
	    		imageBitmap.recycle();
	    		imageBitmap = null;
	    	}

	    	image = null;
	    	submission = null;
	    	savedIndicator = null;
	    	InfoText = null;
	    	context = null;
	    }

	    private String MakeTitle() {
	    	return submission.getAuthorName()+": "+submission.getName();
	    }
	}
	
	// ---------------------------------------------------------
	private ArrayList<PageHolder> pages = null;
	private PageHolder curpage = null;
    
    private ArrayList<Submission> submissions_list = null;
    private int submissions_index = 0;
    
    //~--- methods ------------------------------------------------------------

    /**
     * Method description
     *
     *
     * @param menu
     */
    @Override
    public void createExtraMenuOptions(Menu menu) {
        menu.add(0, AppConstants.MENU_HD, 0, "HD View").setIcon(android.R.drawable.ic_menu_gallery);
        menu.add(0, AppConstants.MENU_REFRESH, 0, "Reload").setIcon(android.R.drawable.ic_menu_rotate);
        super.createExtraMenuOptions(menu);
    }

    /**
     * Views the button using the acitivty that is associated with images
     */
    public void doHdView(Submission s) {
    	File f = null;
    	
    	try {
    		SharedPreferences prefs        = PreferenceManager.getDefaultSharedPreferences(this);
    		if (prefs.getBoolean(AppConstants.PREFERENCE_IMAGE_USE_LIB, false)) {
    			f = new File(s.getSaveName(this));
    		}
    	} catch (Exception e) {
		} 
    	
    	if ( (f == null) || (!f.exists())) {
    		f = new File(ImageStorage.getSubmissionImagePath2(s.getCacheName()));
    		if (!f.exists()) {
    			return;    // Until that file exists, there is nothing we can do really.
    		}
    	}
    		
    	// Starts the associated image viewer, so the user can zoom and tilt
    	Intent intent = new Intent();

    	intent.setAction(android.content.Intent.ACTION_VIEW);
    	intent.setDataAndType(Uri.fromFile(f), "image/*");
    	startActivity(intent);
    }

    /*
     *  (non-Javadoc)
     * @see com.sofurry.IManagedActivity#finish()
     */

    /**
     * Method description
     *
     */
    @Override
    public void finish() {
    	pages.get(0).finish();
    	pages.get(1).finish();
    	pages.get(2).finish();
    	
    	submissions_list = null;

        super.finish();
        System.gc();
    }

    /**
     * Method description
     *
     *
     * @param savedInstanceState
     */
    public void onCreate(Bundle savedInstanceState) {
        super.onCreate(savedInstanceState);

//      Authentication.loadAuthenticationInformation(this);
        setContentView(R.layout.artdetails);

        // init pages for flipper
        curpage = new PageHolder();
        curpage.image           = (ImageView) findViewById(R.id.imagepreview1);
        curpage.InfoText = (TextView) findViewById(R.id.InfoText1);
        curpage.savedIndicator = (ImageView) findViewById(R.id.savedIndicator1);
        curpage.image.setOnClickListener(new Button.OnClickListener() {
            public void onClick(View arg0) {
                doHdView(pages.get(0).submission);
            }
        });
        pages.add(curpage);

        curpage = new PageHolder();
        curpage.image           = (ImageView) findViewById(R.id.imagepreview2);
        curpage.InfoText = (TextView) findViewById(R.id.InfoText2);
        curpage.savedIndicator = (ImageView) findViewById(R.id.savedIndicator2);
        curpage.image.setOnClickListener(new Button.OnClickListener() {
            public void onClick(View arg0) {
                doHdView(pages.get(1).submission);
            }
        });
        pages.add(curpage);

        curpage = new PageHolder();
        curpage.image           = (ImageView) findViewById(R.id.imagepreview3);
        curpage.InfoText = (TextView) findViewById(R.id.InfoText3);
        curpage.savedIndicator = (ImageView) findViewById(R.id.savedIndicator3);
        curpage.image.setOnClickListener(new Button.OnClickListener() {
            public void onClick(View arg0) {
                doHdView(pages.get(2).submission);
            }
        });
        pages.add(curpage);

        // init side menu
        Button ArtistGalleryButton = (Button) findViewById(R.id.ArtistGalleryButton);
        Button SaveButton = (Button) findViewById(R.id.SaveBtn);
        Button BackButton = (Button) findViewById(R.id.BackBtn);

        ArtistGalleryButton.setOnClickListener(new Button.OnClickListener() {
            public void onClick(View arg0) {
                morefromuser(GalleryArtActivity.class,AppConstants.ACTIVITY_GALLERYART);
            }
        });
        
        SaveButton.setOnClickListener(new Button.OnClickListener() {
            public void onClick(View arg0) {
                save();
            }
        });
        
        BackButton.setOnClickListener(new Button.OnClickListener() {
            public void onClick(View arg0) {
                finish();
            }
        });

        
        SharedPreferences prefs        = PreferenceManager.getDefaultSharedPreferences(this);

        // setting menu position
        String MenuPosition = prefs.getString(AppConstants.PREFERENCE_IMAGE_MENU_POSITION, "0");
    	LinearLayout menuLayout = (LinearLayout) findViewById(R.id.menuLayout);
    	RelativeLayout.LayoutParams params = null;
        if ( MenuPosition.equals("1") ) {
        	menuLayout.setOrientation(LinearLayout.HORIZONTAL);
        	params = new RelativeLayout.LayoutParams(  LayoutParams.FILL_PARENT, 
        			    								LayoutParams.WRAP_CONTENT);
        	params.addRule(RelativeLayout.ALIGN_PARENT_BOTTOM);
        	menuLayout.setLayoutParams(params);

        } else if (MenuPosition.equals("2")) {
        	menuLayout.setOrientation(LinearLayout.VERTICAL);
        	params = new RelativeLayout.LayoutParams(  LayoutParams.WRAP_CONTENT, 
        											LayoutParams.FILL_PARENT);
        	params.addRule(RelativeLayout.ALIGN_PARENT_LEFT);
        	menuLayout.setLayoutParams(params);

        } else if (MenuPosition.equals("3")) {
        	menuLayout.setOrientation(LinearLayout.VERTICAL);
        	params = new RelativeLayout.LayoutParams(  LayoutParams.WRAP_CONTENT, 
        											LayoutParams.FILL_PARENT);
        	params.addRule(RelativeLayout.ALIGN_PARENT_RIGHT);
        	menuLayout.setLayoutParams(params);

        } else {
        	menuLayout.setVisibility(View.INVISIBLE);
		}	

        // load data
        if (savedInstanceState == null) {
        	// init new object
            Bundle extras = getIntent().getExtras();

            if (extras != null) {
            	submissions_list = (ArrayList<Submission>) extras.get("list");
            	submissions_index = (int) extras.getInt("listId");

        		pages.get(0).setSubmission(submissions_list.get(submissions_index));
            	if (submissions_index < submissions_list.size()) {
            		pages.get(1).setSubmission(submissions_list.get(submissions_index+1));
            	}
            	if (submissions_index >= 0) {
            		pages.get(2).setSubmission(submissions_list.get(submissions_index-1));
            	}
            }

        } else {
        	// load saved object

        	load saved pages content;

            submissions_list = (ArrayList<Submission>)  retrieveObject("list");
            submissions_index = (Integer) retrieveObject("listId");
        }
    }

    /**
     * Method description
     *
     *
     * @param id
     * @param e
     */
    @Override
    public void onError(int id, Exception e) {
        super.onError(id, e);
    }

    /**
     * Method description
     *
     *
     * @param item
     *
     * @return
     */
    public boolean onOptionsItemSelected(MenuItem item) {
        switch (item.getItemId()) {
            case AppConstants.MENU_HD:
                doHdView(curpage.submission);

                return true;

            case AppConstants.MENU_REFRESH:
            	curpage.doRefresh();
            	
            	return true;
            default:
                return super.onOptionsItemSelected(item);
        }
    }

    /**
     * Method description
     *
     *
     * @param id
     * @param obj
     *
     * @throws Exception
     */
    @Override
    public void onOther(int id, Object obj) throws Exception {
//        pbh.hideProgressDialog();

        super.onOther(id, obj);
    }

    /**
     * Method description
     *
     *
     * @param outState
     */
    @Override
    protected void onSaveInstanceState(Bundle outState) {
    	store pages data;
    	
        storeObject("list", submissions_list);
        storeObject("listId", submissions_index);
        
        super.onSaveInstanceState(outState);
    }

    /*
     * Force reload image
     */
    
    public void reload() {
    	if (imageFetcher == null) {
        	forceDownload = true;
            pbh.showProgressDialog("Refreshing image...");
            imageFetcher = new Thread(this);
            imageFetcher.start();
    	}
    }
    
    /*
     *  (non-Javadoc)
     * @see java.lang.Runnable#run()
     *
     * Fetches an image, either from the icon storage
     *
     */

    /**
     * Method description
     *
     */
    public void run() {
        try {
            Log.i(AppConstants.TAG_STRING, "ImageDownloader: Check cache for id " + pageID);

            // max size for loaded image. it must be larger than biggest side of screen to fit well even if we rotate screen
            int maxsize = Math.max(getApplicationContext().getResources().getDisplayMetrics().heightPixels, getApplicationContext().getResources().getDisplayMetrics().widthPixels);
            
            Bitmap b = null;
        	SharedPreferences prefs        = PreferenceManager.getDefaultSharedPreferences(this);
            
            if (forceDownload) {
            	forceDownload = false;
            } else {
            	if (prefs.getBoolean(AppConstants.PREFERENCE_IMAGE_USE_LIB, false)) {
                	b = ImageStorage.loadBitmap2(my_submission.getSaveName(this), maxsize);
            	}
            	
            	if (b == null) {
            		b = ImageStorage.loadSubmissionImage(getCacheName(my_submission), maxsize);
            	}
            }

            if (b == null) {
            	String url;

            	if (prefs.getString(AppConstants.PREFERENCE_USE_HD_IMAGES, "unk").equals("1")) {
                    url = my_submission.getFullURL();
            	} else {
            		url = my_submission.getPreviewURL();
            	}

                Log.i(AppConstants.TAG_STRING, "ImageDownloader: Downloading image for id " + pageID + " from " + url);

                // 1. extract extension
//                String ext = HttpRequest.extractExtension(url);

                // 2. download file
                ContentDownloader.downloadFile2(url, ImageStorage.getSubmissionImagePath2(getCacheName(my_submission)), null);

                // 3. read file
                b = ImageStorage.loadSubmissionImage(getCacheName(my_submission), maxsize);

                // b = ContentDownloader.downloadBitmap(url);
                // ImageStorage.saveSubmissionImage(pageID, b);
                if (b == null) {
                    throw new Exception("Downloaded Image failed to load.");
                }
            }

            // Send bitmap to our hungry thread
            requesthandler.postMessage(AppConstants.REQUEST_ID_DOWNLOADIMAGE, b);
        } catch (Exception e) {
            requesthandler.postMessage(AppConstants.REQUEST_ID_DOWNLOADIMAGE, e);
        } catch (java.lang.OutOfMemoryError om) {
            requesthandler.postMessage(AppConstants.REQUEST_ID_DOWNLOADIMAGE, om);
        } finally {
        	imageFetcher = null; // use imageFetcher as flag. If null then there are no pending image download. Also clean unnecessary object references.
        }
    }

    
    /**
     * Saves the file to the images folder
     */
    public void save() {
        try {
            // source file in cache
            File f = new File(ImageStorage.getSubmissionImagePath2(getCacheName(my_submission)));
            if (! f.exists()) {
                throw new Exception("File has not downloaded properly yet. File does not exist.");
            }

            // target file in user images library
            String targetPath = my_submission.getSaveName(this);
            
            // create directories. alredy done by ensureDirectory
//            File td = new File(targetPath.substring(0, targetPath.lastIndexOf('/')));
//            td.mkdirs();

            File tf = new File(targetPath);
            FileStorage.ensureDirectory(tf.getParent());
            
            // save file to user image library
            FileStorage.copyFile(f, tf);
            Toast.makeText(getApplicationContext(), "File saved to:\n" + targetPath, Toast.LENGTH_LONG).show();
            
            // display saved indicator
            if (PreferenceManager.getDefaultSharedPreferences(this).getBoolean(AppConstants.PREFERENCE_IMAGE_CHECK_SAVED, true)) {
               	savedIndicator.setVisibility(View.VISIBLE);
            }
        } catch (Exception e) {
            onError(-1, e);
        }
    }

    /**
     * Shows the image
     */
    public void showImage() {
        image.setImageBitmap(imageBitmap);
    }

    // destroy image viewer on back button
    @Override
    public boolean onKeyDown(int keyCode, KeyEvent event)
    {
        if ((keyCode == KeyEvent.KEYCODE_BACK))
        {
            finish();
        }
        return super.onKeyDown(keyCode, event);
    }
}
